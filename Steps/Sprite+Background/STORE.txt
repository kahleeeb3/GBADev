#include <string.h>
#include <tonc.h>
#include "ch1.h"

OBJ_ATTR obj_buffer[128];
OBJ_AFFINE *obj_aff_buffer= (OBJ_AFFINE*)obj_buffer;

// testing a few sprite things
// D-pad: move 
// SELECT: switch palette
// START: toggle mapping mode
// A: horizontal flip (z)
// B: vertical flip (x)
// L & R shift starting tile
void test()
{
	int x= 0, y= 0;
	u32 tid= 0, pb= 0;		// tile id, pal-bank

	OBJ_ATTR *ch1= &obj_buffer[0];
	obj_set_attr(ch1, 
		ATTR0_SQUARE,				// Square, regular sprite
		ATTR1_SIZE_32,					// 64x64p, 
		ATTR2_PALBANK(pb) | tid);		// palbank 0, tile 0

	obj_set_pos(ch1, x, y);

	while(1)
	{
		vid_vsync();
		key_poll();

		
		// I want the character to stay center for now
		
		/*if( (x == 0 && key_tri_horz() == -1) || (x == 210 && key_tri_horz() == 1) )
			continue;
		if( (y == 0 && key_tri_vert() == -1) || (y == 130 && key_tri_vert() == 1) )
			continue;
		else{
			x += 2*key_tri_horz(); // move left/right
			y += 2*key_tri_vert(); // move up/down
		}*/
			
		
		// flip left and right when moving
		
		// if flipped: ch1->attr1 = 0x1XXX
		// Since ATTR1_HFLIP = 0x1000, 
		// attr1 & ATTR1_HFLIP = 0x0000 when ch1 is not flipped
		
		if(key_hit(KEY_LEFT) && (ch1->attr1 & ATTR1_HFLIP) != 0x1000){
			ch1->attr1 ^= ATTR1_HFLIP;
		}
			
		// same thing here but for the other direction
		if(key_hit(KEY_RIGHT) && (ch1->attr1 & ATTR1_HFLIP) != 0x0000){
			ch1->attr1 ^= ATTR1_HFLIP;
			
			//REG_DISPCNT= DCNT_MODE0 | DCNT_BG0;
			//tte_init_se_default(0, BG_CBB(0)|BG_SBB(31));
			//tte_write("#{P:72,64}"); // Goto (72, 64).
			//tte_write("Hello World!"); // Print "Hello world!"
			
		}
		
		ch1->attr2= ATTR2_BUILD(tid, pb, 0);
		obj_set_pos(ch1, x, y);

		oam_copy(oam_mem, obj_buffer, 1);	// only need to update one

	}
}

int main()
{

	memcpy(&tile_mem[4][0], ch1Tiles, ch1TilesLen);
	memcpy(pal_obj_mem, ch1Pal, ch1PalLen);
	
	oam_init(obj_buffer, 128);
	REG_DISPCNT= DCNT_OBJ | DCNT_OBJ_1D;

	test();

	while(1);

	return 0;
}
